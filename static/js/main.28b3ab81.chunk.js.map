{"version":3,"sources":["actions/index.js","NavButtons.js","App.js","serviceWorker.js","reducers/counter.js","reducers/islogged.js","reducers/index.js","index.js"],"names":["displayDeclanData","myParam","type","payload","displayLiamData","displayOniceData","displayAlvisonData","NavButtons","myDispatcher","useDispatch","className","onClick","App","person","useSelector","state","Members","src","photo","alt","name","quote","hobbies","food","languages","Boolean","window","location","hostname","match","counterReducer","action","loggedReducer","rootReducers","combineReducers","counterReducers","myStatus","loggedReducers","myStore","createStore","rootReducer","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28b3ab81.chunk.js","sourcesContent":["export const displayDeclanData = (myParam) =>{\r\n    return{\r\n        type:\"DISPLAY_DECLAN\",\r\n        payload:        {\r\n            \"id\": \"0\",\r\n            \"name\": \"Declan Hunter\",\r\n            \"quote\": \"Pappa don't eat my food!\",\r\n            \"hobbies\": \"Read, to play guitar, to listen to music, painting, build things with legos, to draw\",\r\n            \"food\": \"Rice and Beans, Gallopinto with fried cheese, Beans Soup with cheese in crumbles\",\r\n            \"languages\": \"Spanish, English\",\r\n            \"photo\": \"declan.jpg\"\r\n        }\r\n    }\r\n}\r\n\r\nexport const displayLiamData = (myParam) =>{\r\n    return{\r\n        type:\"DISPLAY_LIAM\",\r\n        payload: {\r\n            \"id\": \"1\",\r\n            \"name\": \"Liam Hunter\",\r\n            \"quote\": \"pappa, detan, mamma bu, chichi ah hoia, ti ta\",\r\n            \"hobbies\": \"Sleep, Eat, Sleep, Eat, Poop\",\r\n            \"food\": \"Chicken, Fish, Fried Plantains, Potatoes, Espaguetti\",\r\n            \"languages\": \"Spanish, English\",\r\n            \"photo\": \"liam.jpg\"\r\n        }\r\n    }\r\n}\r\n\r\nexport const displayOniceData = (myParam) =>{\r\n    return{\r\n        type:\"DISPLAY_ONICE\",\r\n        payload: {\r\n            \"id\": \"2\",\r\n            \"name\": \"Onice Acevedo\",\r\n            \"quote\": \"You know you're in love when u can't fall asleep cus reality is finally better than your dreams\",\r\n            \"hobbies\": \"Read, Music, Languages, Shoes, Clothings, Romantic Movies, to sing, to cook, to run\",\r\n            \"food\": \"Shrimps, Fish soup, Chinese Food, Italian Food, pizza, chocolate, brownies\",\r\n            \"languages\": \"Spanish, English, trying to learn French\",\r\n            \"photo\": \"onice.jpg\"\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const displayAlvisonData = (myParam) =>{\r\n    return{\r\n        type:\"DISPLAY_ALVISON\",\r\n        payload: {\r\n            \"id\": \"3\",\r\n            \"name\": \"Alvison Hunter\",\r\n            \"quote\": \"a mind is a terrible thing to waste\",\r\n            \"hobbies\": \"Read, Music, Languages, Programming languages\",\r\n            \"food\": \"Chicken, Fish, Chinese Food\",\r\n            \"languages\": \"French, Spanish, English, Italian, Portuguese, German\",\r\n            \"photo\": \"alvison.jpg\"\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  displayLiamData,\r\n  displayDeclanData,\r\n  displayOniceData,\r\n  displayAlvisonData\r\n} from \"./actions\";\r\n\r\nfunction NavButtons() {\r\n  \r\n    const myDispatcher = useDispatch();\r\n  return (\r\n   \r\n        <div className=\"row mytopmargin\">\r\n            <div className=\"col-lg-3 col-sm-12\">\r\n              <button\r\n                onClick={() => myDispatcher(displayLiamData(\"liam.jpg\"))}\r\n                className=\"btn btn-outline-primary btn-block btnMargins\"\r\n              >\r\n                The Baby\r\n              </button>\r\n            </div>\r\n            <div className=\"col-lg-3 mb-2 col-sm-12\">\r\n            <button\r\n              onClick={() => myDispatcher(displayOniceData(\"onice.jpg\"))}\r\n              className=\"btn btn-outline-success btn-block btnMargins\"\r\n            >\r\n              The Mother\r\n            </button>\r\n            </div>\r\n            <div className=\"col-lg-3 mb-2 col-sm-12\">\r\n            <button\r\n              onClick={() => myDispatcher(displayDeclanData(\"declan.jpg\"))}\r\n              className=\"btn btn-outline-warning btn-block btnMargins\"\r\n            >\r\n              The Elder\r\n            </button>\r\n            </div>\r\n            <div className=\"col-lg-3 mb-2 col-sm-12\">\r\n            <button\r\n              onClick={() => myDispatcher(displayAlvisonData(\"alvison.jpg\"))}\r\n              className=\"btn btn-outline-info btn-block\"\r\n            >\r\n              The Father\r\n            </button>\r\n            </div>\r\n        </div>\r\n\r\n  );\r\n}\r\n\r\nexport default NavButtons;\r\n","import React from \"react\";\nimport NavButtons from \"./NavButtons\";\nimport { useSelector} from \"react-redux\";\n\nfunction App() {\n  const person = useSelector(state => state.Members);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container-fluid\">\n        <NavButtons />\n\n        <div className=\"row mytopmargin\">\n          <div className=\"col-lg-3 col-sm-12 col-xs-12\">\n            <div className=\"circular--portrait\">\n              <img\n                src={person.photo ? person.photo : \"liam.jpg\"}\n                className=\"rounded-circle fade-in chosen\"\n                alt={person.name}\n              />\n            </div>\n          </div>\n\n          <div className=\"col-lg-1 col-sm-12 col-xs-12\"></div>\n\n          <div className=\"col-lg-8 col-sm-12 col-xs-12\">\n            <ul className=\"list-group\">\n              <li className=\"list-group-item active\">\n                {\" \"}\n                <b className=\"text-uppercase\">\n                  {\" \"}\n                  {person.name ? person.name : \"Liam Hunter\"}{\" \"}\n                </b>\n              </li>\n              <li className=\"list-group-item\">\n                <b className=\"text-uppercase\">quote: </b>\n                {person.quote\n                  ? person.quote\n                  : \"dada mamma tetan, chichi ah hoia, ti ta\"}\n              </li>\n              <li className=\"list-group-item\">\n                <b className=\"text-uppercase\">hobbies: </b>\n                {person.hobbies\n                  ? person.hobbies\n                  : \"Sleep, Eat, Sleep, Eat, Poop\"}\n              </li>\n              <li className=\"list-group-item\">\n                <b className=\"text-uppercase\"> food: </b>\n                {person.food\n                  ? person.food\n                  : \"Chicken, Fish, Fried Plantains, Potatoes, Espaguetti\"}\n              </li>\n              <li className=\"list-group-item\">\n                <b className=\"text-uppercase\">languages: </b>\n                {person.languages ? person.languages : \"Spanish, English\"}\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const counterReducer = (state = \"liam.jpg\", action)=>{\r\n    switch (action.type){\r\n        case \"DISPLAY_LIAM\":\r\n            return state = action.payload;\r\n        case \"DISPLAY_DECLAN\":\r\n                return state = action.payload;\r\n        case \"DISPLAY_ONICE\":\r\n                return state = action.payload;\r\n                case \"DISPLAY_ALVISON\":\r\n                    return state = action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n    }\r\n\r\n    export default counterReducer;","const loggedReducer = (state=false, action)=>{\r\n    switch (action.type){\r\n        case \"SIGN_IN\":\r\n            return !state;\r\n        default: \r\n            return state;\r\n    }\r\n    };\r\n\r\n    export default loggedReducer;","import counterReducers from './counter';\r\nimport loggedReducers from './islogged';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst rootReducers = combineReducers({\r\n    Members: counterReducers,\r\n    myStatus: loggedReducers\r\n});\r\nexport default rootReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport rootReducer from \"./reducers\";\nimport {Provider} from \"react-redux\";\n\n\nconst myStore = createStore(rootReducer);\n\nReactDOM.render(\n<Provider store={myStore}>\n    <App />\n    </Provider>\n, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}